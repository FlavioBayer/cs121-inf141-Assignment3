/**
 * UCI CS 121 - Assignment 1: Text processing functions
 * @author Flavio Bayer
 * @version 1.0
 * @date 2016.01.19
 */
/**
* In the worst case all the words have only the same character and the algorithm has cost O((n^3)*m), where n is the number of words and m is the average length of the words:
*      The outer loop(i) runs n times, thus the cost is O(n)
*      The inner loop(j) runs n/2 times(on average for each iteration of the outer loop), thus the cost is O(n)
*      The test of palindrome(check whether words[i..j](inclusive) is a palindrome) also costs O(n*m) in the worst case(all the words are palindromes), where m is the cost of a string comparison
*      The sort of the output list costs O(n*log(n)*m), where n is the number of words and m is the average length of the word
*      Thus, the total cost of the algorithm in the worst case is O((n^3)*m), where n is the number of words and m is the average length of the word
* In the best case there's no palindrome to be found, thus each palindrome test fails at the first character comparison, thus having cost O(1).
*   In this case only the two loops have non constant cost, thus the cost in the best case is O(n^2), where n is the number of words
* The real running time of the algorithm depends on the input.

* This algorithm is a modification of computePalindromeFrequenciesSlow, it tries to avoid some unnecessary comparison
* Store all the words reversed, then iterate over the words and try to find one that match in the reversed word
* When a possible match is found the algorithm naively check if the words create a palindrome
* This algorithm helps to find words in which the border match, but not the inner part(that's why we use the naive technique to make sure)
* Thus the algorithm avoid some unnecessary comparison, but still need to perform a lot of comparison
* The final complexity is the same, but by removing some of the comparison the overall speed is better
* This technique might create overhead for a small number of words, but is usually faster for a large set of words
*/